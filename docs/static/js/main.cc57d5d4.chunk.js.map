{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","components/GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","type","value","onChange","target","placeholder","getGifs","category","a","url","encodeURI","fetch","response","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","image","key","GifExpertApp","categories","text","prevCategories","ReactDOM","render","document","getElementById"],"mappings":"qMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEVC,mBAAS,IAFC,mBAEvCC,EAFuC,KAE3BC,EAF2B,KAgB9C,OACI,0BAAMC,SATW,SAACC,GAClBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC3BR,EAAcE,GACdC,EAAc,OAMd,2BACIM,KAAK,OACLC,MAAQR,EACRS,SAjBO,SAACN,GAChBF,EAAcE,EAAEO,OAAOF,QAiBfG,YAAa,gB,uBCzBhBC,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbC,EAFa,iDAEoCC,UAAWH,GAF/C,+DAGII,MAAOF,GAHX,cAGbG,EAHa,gBAIIA,EAASC,OAJb,uBAIXC,EAJW,EAIXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVvB,kBAcZM,GAdY,4CAAH,sDCEPO,EAAc,SAAC,GAAsB,IAAnBH,EAAkB,EAAlBA,MAAOV,EAAW,EAAXA,IAClC,OACI,yBAAKc,UAAU,0CACZ,yBAAKC,IAAKf,EAAKgB,IAAKN,IACnB,2BAAKA,KCFJO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECDb,SAAEA,GAAe,IAAD,EACdd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAH2B,mBACjCC,EADiC,KAC1BC,EAD0B,KAgBxC,OAVAC,qBAAU,WACNxB,EAASC,GACJwB,MAAM,SAAAC,GACHH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAGtB,CAAEpB,IAEEqB,EDb2BK,CAAc1B,GAAlCa,EAFuB,EAE7BN,KAAca,EAFe,EAEfA,QAEtB,OACI,oCACI,4BAAMpB,GAEJoB,GAAW,2CAEb,yBAAKJ,UAAU,aACTH,GAAUA,EAAOJ,KAAK,SAAAkB,GAAK,OACzB,kBAAC,EAAD,eACIC,IAAOD,EAAMhB,IACRgB,UEdhBE,EAAe,WAExB,IAF8B,EAIM3C,mBAFvB,IAFiB,mBAIvB4C,EAJuB,KAIX7C,EAJW,KAU9B,OACI,oCACI,4CACA,6BAEA,kBAAC,EAAD,CAAaA,cATH,SAAC8C,GACf9C,GAAc,SAAA+C,GAAc,OAAKD,GAAL,mBAAcC,UAUtC,4BAEQF,EAAWrB,KAAK,SAAAT,GAAQ,OACpB,kBAAC,EAAD,CACI4B,IAAM5B,EACNA,SAAYA,U,MCrBxCiC,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,U","file":"static/js/main.cc57d5d4.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ({ setCategories }) => {\n\n    const [inputValue, setinputValue] = useState('');\n\n    const hadleInput = (e) => {\n        setinputValue(e.target.value); \n    }\n\n    const handleSubmit = (e)=> {\n        e.preventDefault();\n        if (inputValue.trim().length > 2) {\n            setCategories(inputValue);\n            setinputValue('')\n        } \n    }\n\n    return (\n        <form onSubmit={ handleSubmit }>\n            <input\n                type='text'\n                value={ inputValue }\n                onChange={ hadleInput }\n                placeholder= 'Search...'\n            />\n        </form>\n    )\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}\n\n","export const getGifs = async( category ) => {\n        \n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&limit=10&api_key=apjhVNTfyDG8fyJfCOTMMGV1GDziKYIi`;\n    const response = await fetch( url );\n    const { data } = await response.json();\n\n    const gifs = data.map( img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    });\n\n    return gifs;\n}; ","import React from 'react';\n\nexport const GifGridItem = ( { title, url } ) => {\n    return (\n        <div className='card animate__animated animate__fadeIn'>\n           <img src={url} alt={title} />\n            <p>{ title }</p>\n        </div>\n    )\n}\n","import React from 'react';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ({ category }) => {\n\n    const { data: images, loading } = useFetchGifs( category );\n \n    return (\n        <>\n            <h3>{ category }</h3>\n\n            { loading && <p> Loading... </p>}\n\n            <div className='card-grid'>\n                { images && images.map( image => (\n                    <GifGridItem\n                        key= { image.id }\n                        { ...image }\n                    />\n                ))}\n            </div>\n        </>\n    )\n};\n","import { useState, useEffect } from 'react';\nimport { getGifs } from '../helpers/getGifs';\n\nexport const useFetchGifs = ( category ) => {\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect(() => {\n        getGifs( category )\n            .then( imgs => {\n                setState({\n                    data: imgs,\n                    loading: false\n                })\n            });\n    }, [ category ]);\n\n    return state;\n\n}\n","import React, { useState } from 'react';\nimport { AddCategory } from './AddCategory';\nimport { GifGrid } from './GifGrid';\n\nexport const GifExpertApp = () => {\n\n    const data = [];\n\n    const [categories, setCategories] = useState(data);\n    \n    const handleAdd = (text) => {\n        setCategories(prevCategories => [text, ...prevCategories])\n    }\n\n    return (\n        <>\n            <h2>GifExpertApp</h2>\n            <hr />\n\n            <AddCategory setCategories= { handleAdd } />\n\n            <ol>\n                { \n                    categories.map( category => (\n                        <GifGrid\n                            key={ category }\n                            category= { category }\n                        />\n                    ))\n                }\n            </ol>\n        </>\n    )\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {GifExpertApp} from './components/GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}